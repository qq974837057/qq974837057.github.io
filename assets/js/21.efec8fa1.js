(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{453:function(t,a,s){t.exports=s.p+"assets/img/Git-flow.631b95a8.png"},530:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ul",[e("li",[t._v("参考"),e("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰的 Git 教程"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"git-flow-工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-工作流"}},[t._v("#")]),t._v(" Git flow 工作流")]),t._v(" "),e("ul",[e("li",[t._v("两个长期分支\n"),e("ul",[e("li",[t._v("主分支 master:稳定的发布版（已发布代码）（一般有保护功能）")]),t._v(" "),e("li",[t._v("主开发分支 develop:最新的开发代码")])])]),t._v(" "),e("li",[t._v("三个短期分支（用完该删除）\n"),e("ul",[e("li",[t._v("新功能分支 feature:开发新功能（由 develop 分支上面分出来，开发完并入 Develop）")]),t._v(" "),e("li",[t._v("预发布分支 release:发布前的测试复查、版本控制、缺陷修复、（由 Develop 分支上面分出来，结束后并入 develop 和 master）")]),t._v(" "),e("li",[t._v('补丁分支 hotfix:紧急修复 bug(issue 编号+名字)，从 master 上某个 tag 创建，修补结束，写上"fixes #14" 合并如 master 和 develop。')])])]),t._v(" "),e("li",[t._v("特点：\n"),e("ul",[e("li",[t._v("基于版本发布")]),t._v(" "),e("li",[t._v("优点是清晰可控")]),t._v(" "),e("li",[t._v("缺点是相对复杂，需要同时维护两个长期分支。")]),t._v(" "),e("li",[t._v("Github flow 适合持续发布，只有一个长期分支就是 master")]),t._v(" "),e("li",[t._v("GitLab flow 上游 master 优先，由 master 分出其他分支如 production，去发布版本。上游没问题，才合并到下游。")])])]),t._v(" "),e("li",[t._v("总流程\n"),e("ul",[e("li",[t._v("并行开发：新功能新建 feature 分支，开发完后合并到主开发分支 develop")]),t._v(" "),e("li",[t._v("协作开发：从 develop 上创建新分支，即包括所有已完成的 feature")]),t._v(" "),e("li",[t._v("预发布：develop 上创建一个 release 分支，发布到测试环境测试，有问题在此分支修复，修复完毕合并到 develop 和 master 分支。")]),t._v(" "),e("li",[t._v("紧急修复：在已发布的 tag 上新建修复 hotfix 分支，修补结束合并如 master 和 develop。")])])]),t._v(" "),e("li",[t._v("tag\n"),e("ul",[e("li",[t._v("概念：对某个提交点打上标签，如发布版本后打 tag。")]),t._v(" "),e("li",[t._v("作用：便于以后回滚特定版本，而不需要 revert。")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:s(453),alt:"Git-flow"}})]),t._v(" "),e("h2",{attrs:{id:"git-的区域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的区域"}},[t._v("#")]),t._v(" Git 的区域")]),t._v(" "),e("p",[t._v("画了一个简单的示意图，供大家参考")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1e7850494c048c99132d4723a8281a7~tplv-k3u1fbpfcp-watermark.image",alt:"yuque_diagram.jpg"}})]),t._v(" "),e("ul",[e("li",[t._v("远程仓库（Remote）：在远程用于存放代码的服务器，远程仓库的内容能够被分布其他地方的本地仓库修改。")]),t._v(" "),e("li",[t._v("本地仓库（Repository）：在自己电脑上的仓库，平时我们用 git commit 提交到暂存区，就会存入本地仓库。")]),t._v(" "),e("li",[t._v("暂存区（Index）：执行 "),e("code",[t._v("git add")]),t._v(" 后，工作区的文件就会被移入暂存区，表示哪些文件准备被提交，当完成某个功能后需要提交代码，可以通过 "),e("code",[t._v("git add")]),t._v(" 先提交到暂存区。")]),t._v(" "),e("li",[t._v("工作区（Workspace）：工作区，开发过程中，平时打代码的地方，看到是当前最新的修改内容。")])]),t._v(" "),e("h2",{attrs:{id:"git-的基本使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的基本使用场景"}},[t._v("#")]),t._v(" Git 的基本使用场景")]),t._v(" "),e("p",[t._v("以下命令远程主机名默认为"),e("code",[t._v("origin")]),t._v("，如果有其他远程主机，将"),e("code",[t._v("origin")]),t._v("替换为其他即可。")]),t._v(" "),e("h3",{attrs:{id:"git-fetch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-fetch"}},[t._v("#")]),t._v(" git fetch")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取远程仓库特定分支的更新")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取远程仓库所有分支的更新")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch --all\n")])])]),e("h3",{attrs:{id:"git-pull"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" git pull")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从远程仓库拉取代码，并合并到本地，相当于 git fetch && git merge")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取后，使用rebase的模式进行合并")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --rebase origin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[t._v("注意")]),t._v(" "),e("ul",[e("li",[t._v("直接 git pull 不加任何选项，等价于"),e("code",[t._v("git fetch + git merge FETCH_HEAD")]),t._v("，执行效果就是会拉取所有分支信息回来，但是只合并当前分支的更改。其他分支的变更没有执行合并。")]),t._v(" "),e("li",[t._v("使用 git pull --rebase 可以减少冲突的提交点，比如我本地已经提交，但是远程其他同事也有新的代码提交记录，此时拉取远端其他同事的代码，如果是 merge 的形式，就会有一个 merge 的 commit 记录。如果用 rebase，就不会产生该合并记录，是将我们的提交点挪到其他同事的提交点之后。")])]),t._v(" "),e("h3",{attrs:{id:"git-branch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于当前分支，新建一个本地分支，但不切换")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看远程分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -r\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地和远程分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -a\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除本地分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于旧分支创建一个新分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("new-branch-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("old-branch-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于某提交点创建一个新分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("new-branch-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新命名分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -m "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("old-branch-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("new-branch-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h3",{attrs:{id:"git-checkout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到某个分支上")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于当前分支，创建一个分支并切换到新分支上")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h3",{attrs:{id:"git-add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添把当前工作区修改的文件添加到暂存区，多个文件可以用空格隔开")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" xxx\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加当前工作区修改的所有文件到暂存区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),e("h3",{attrs:{id:"git-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交暂存区中的所有文件，并写下提交的概要信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 相等于 git add . && git commit -m")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -am\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对最近一次的提交的信息进行修改，此操作会修改commit的hash值")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])])]),e("h3",{attrs:{id:"git-push"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推送提交到远程仓库")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强行推送到远程仓库")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -f\n")])])]),e("h3",{attrs:{id:"git-tag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[t._v("#")]),t._v(" git tag")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有已打上的标签")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新增一个标签打在当前提交点上，并写上标签信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 为指定提交点打上标签")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除指定标签")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h2",{attrs:{id:"git-的进阶使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的进阶使用场景"}},[t._v("#")]),t._v(" Git 的进阶使用场景")]),t._v(" "),e("blockquote",[e("p",[t._v("HEAD 表示最新提交 ；HEAD^表示上一次； HEAD~n 表示第 n 次（从 0 开始，表示最近一次）")])]),t._v(" "),e("h3",{attrs:{id:"正常协作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正常协作"}},[t._v("#")]),t._v(" 正常协作")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git pull")]),t._v(" 拉取远程仓库的最新代码")]),t._v(" "),e("li",[t._v("工作区修改代码，完成功能开发")]),t._v(" "),e("li",[e("code",[t._v("git add .")]),t._v(" 添加修改的文件到暂存区")]),t._v(" "),e("li",[e("code",[t._v("git commit -m 'message'")]),t._v(" 提交到本地仓库")]),t._v(" "),e("li",[e("code",[t._v("git push")]),t._v("将本地仓库的修改推送到远程仓库")])]),t._v(" "),e("h3",{attrs:{id:"代码合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码合并"}},[t._v("#")]),t._v(" 代码合并")]),t._v(" "),e("h4",{attrs:{id:"git-merge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),e("p",[t._v("自动创建一个新的合并提交点"),e("code",[t._v("merge-commit")]),t._v("，且包含两个分支记录。如果合并的时候遇到冲突，仅需要修改解决冲突后，重新 commit。")]),t._v(" "),e("ul",[e("li",[t._v("场景：如"),e("strong",[t._v("dev 要合并进主分支 master")]),t._v("，保留详细的合并信息")]),t._v(" "),e("li",[t._v("优点：展示真实的 commit 情况")]),t._v(" "),e("li",[t._v("缺点：分支杂乱")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev\n")])])]),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25dbbe263dc9400b9c51ede7ca85632f~tplv-k3u1fbpfcp-zoom-1.image",alt:"rf1o2b6eduboqwkigg3w.gif"}})]),t._v(" "),e("h4",{attrs:{id:"git-merge-的几种模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-的几种模式"}},[t._v("#")]),t._v(" git merge 的几种模式")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git merge --ff")]),t._v(" （默认--ff,fast-farward）\n"),e("ul",[e("li",[t._v("结果：被 merge 的分支和当前分支在图形上并为一条线，被 merge 的提交点 commit 合并到当前分支，没有新的提交点 merge")]),t._v(" "),e("li",[t._v("缺点：代码合并不冲突时，默认快速合并，主分支按时间顺序混入其他分支的零碎 commit 点。而且删除分支，会丢失分支信息。")])])]),t._v(" "),e("li",[e("code",[t._v("git merge --no-ff")]),t._v("（不快速合并、推荐）\n"),e("ul",[e("li",[t._v("结果：被 merge 的分支和当前分支不在一条线上，被 merge 的提交点 commit 还在原来的分支上，并在当前分支产生一个新提交点 merge")]),t._v(" "),e("li",[t._v("优点：代码合并产生冲突就会走这个模式，利于回滚整个大版本(主分支自己的 commit 点)")])])]),t._v(" "),e("li",[e("code",[t._v("git merge --squash")]),t._v("（把多次分支 commit 历史压缩为一次）\n"),e("ul",[e("li",[t._v("结果：把多次分支 commit 历史压缩为一次")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70ab71b89bb74c248b8b7098383a04e0~tplv-k3u1fbpfcp-zoom-1.image",alt:"image.png"}})]),t._v(" "),e("h4",{attrs:{id:"git-rebase"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),e("ul",[e("li",[t._v("不产生"),e("code",[t._v("merge commit")]),t._v("，变换起始点位置，“整理”成一条直线，且能使用命令合并多次 commit。")]),t._v(" "),e("li",[t._v("如在 develop 上"),e("code",[t._v("git rebase master")]),t._v(" 就会拉取到 master 上的最新代码合并进来，也就是将分支的起始时间指向 master 上最新的 commit 上。自动保留的最新近的修改，不会遇到合并冲突。而且可交互操作（执行合并删除 commit），可通过交互式变基来合并分支之前的 commit 历史"),e("code",[t._v("git rebase -i HEAD~3")])]),t._v(" "),e("li",[t._v("场景：主要"),e("strong",[t._v("发生在个人分支")]),t._v("上，如 "),e("code",[t._v("git rebase master")]),t._v("整理自己的 dev 变成一条线。频繁进行了 git commit 提交，可用交互操作"),e("code",[t._v("drop")]),t._v("删除一些提交，"),e("code",[t._v("squash")]),t._v("提交融合前一个提交中。")]),t._v(" "),e("li",[t._v("优点：简洁的提交历史")]),t._v(" "),e("li",[t._v("缺点：发生错误难定位，解决冲突比较繁琐，要一个一个解决。")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\n")])])]),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66b9c66445c44aee91a5587b887a8e27~tplv-k3u1fbpfcp-zoom-1.image",alt:"dwyukhq8yj2xliq4i50e.gif"}}),e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4b1de83531a41c38983ce025d356843~tplv-k3u1fbpfcp-zoom-1.image",alt:"msofpv7k6rcmpaaefscm.gif"}})]),t._v(" "),e("h4",{attrs:{id:"git-merge-和-git-rebase-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-和-git-rebase-的区别"}},[t._v("#")]),t._v(" git merge 和 git rebase 的区别")]),t._v(" "),e("ul",[e("li",[t._v("merge 会保留两个分支的 commit 信息，而且是交叉着的，即使是 ff 模式，两个分支的 commit 信息会混合在一起（按真实提交时间排序），多用于自己 dev 合并进 master。")]),t._v(" "),e("li",[t._v("rebase 意思是变基，改变分支的起始位置，在 dev 上"),e("code",[t._v("git rebase master")]),t._v("，将 dev 的多次 commit 一起拉到要 master 最新提交的后面(时间最新)，变成一条线，多用于整理自己的 dev 提交历史，然后把 master 最新代码合进来。")]),t._v(" "),e("li",[t._v("使用 rebase 还是 merge 更多的是管理风格的问题，有个较好实践：\n"),e("ul",[e("li",[t._v("就是 dev 在 merge 进主分支（如 master）之前，最好在自己的 dev 分支上，执行 rebase master 主分支，然后用 pull request 或 MR 创建普通 merge 请求。")]),t._v(" "),e("li",[t._v("用 rebase 整理成重写 commit 历史，所有修改拉到 master 的最新修改前面，保证 dev 运行在当前最新的主 branch 的代码。避免了 git 历史提交里无意义的交织。")])])]),t._v(" "),e("li",[t._v("假设场景：从 dev 拉出分支 feature-a。\n"),e("ul",[e("li",[t._v("那么当 dev 要合并 feature-a 的内容时，使用 "),e("code",[t._v("git merge feature-a")])]),t._v(" "),e("li",[t._v("反过来当 feature-a 要更新 dev 的内容时，使用 "),e("code",[t._v("git rebase dev")])])])]),t._v(" "),e("li",[t._v("git merge 和 git rebase 两者对比图\n"),e("ul",[e("li",[t._v("git merge 图示 "),e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/857ac736dd8146dca76e89cad23c7c22~tplv-k3u1fbpfcp-zoom-1.image",alt:"image.png"}})]),t._v(" "),e("li",[t._v("git rebase 图示 "),e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da1899fbaf6e4a9295e3e6540ce5d6af~tplv-k3u1fbpfcp-zoom-1.image",alt:"image.png"}})])])])]),t._v(" "),e("h4",{attrs:{id:"取消合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#取消合并"}},[t._v("#")]),t._v(" 取消合并")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取消merge合并")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --abort\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取消rebase合并")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --abort\n")])])]),e("h3",{attrs:{id:"代码回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码回退"}},[t._v("#")]),t._v(" 代码回退")]),t._v(" "),e("h4",{attrs:{id:"代码回退的几种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码回退的几种方式"}},[t._v("#")]),t._v(" 代码回退的几种方式")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git checkout")])]),t._v(" "),e("li",[e("code",[t._v("git reset")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("--hard")]),t._v("：硬重置，影响【工作区、暂存区、本地仓库】")]),t._v(" "),e("li",[e("code",[t._v("--mixed")]),t._v("：默认，影响【暂存区、本地仓库】，被重置的修改内容还留在工作区")]),t._v(" "),e("li",[e("code",[t._v("--soft")]),t._v("：软重置，影响 【本地仓库】，被重置的修改内容还留在工作区和暂存区")])])]),t._v(" "),e("li",[e("code",[t._v("git revert")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤回工作区该文件的修改，多个文件用空格隔开")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤回工作区所有改动")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 放弃已git add到暂存区的指定文件的缓存（HEAD表示最新版本）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 放弃所有的缓存")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 丢弃已commit的其他版本，hard参数表示同时重置工作区的修改")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回到上一个commit的版本，hard参数表示同时重置工作区的修改")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销0ffaacc这次提交")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert 0ffaacc\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销最近一次提交")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销最近2次提交，注意：数字从0开始")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD~1\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回退后要执行强制推送远程分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -f\n")])])]),e("h4",{attrs:{id:"git-reset-和-git-revert-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-和-git-revert-的区别"}},[t._v("#")]),t._v(" git reset 和 git revert 的区别")]),t._v(" "),e("ul",[e("li",[t._v("reset 是根据"),e("commit-id",[t._v("来移动 HEAD 指针，在该次提交点后面的提交记录会丢失。\n"),e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbdf4d8c134640e6b8e97c34ceee4d07~tplv-k3u1fbpfcp-zoom-1.image",alt:"hlh0kowt3hov1xhcku38.gif"}})])],1),t._v(" "),e("li",[t._v("revert 会产生新的提交，来抵消选中的该次提交的修改内容，可以理解为“反做”，不会丢失中间的提交记录。\n"),e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e68ae4f29e6c4347a0c1c85d9a79dfe9~tplv-k3u1fbpfcp-zoom-1.image",alt:"3kkd2ahn41zixs12xgpf.gif"}})]),t._v(" "),e("li",[t._v("使用建议\n"),e("ul",[e("li",[t._v("公共分支回退使用 git revert，避免丢掉其他同事的提交。")]),t._v(" "),e("li",[t._v("自己分支回退可使用 git reset，也可以使用 git revert，按需使用。")])])])]),t._v(" "),e("h3",{attrs:{id:"挑拣代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#挑拣代码"}},[t._v("#")]),t._v(" 挑拣代码")]),t._v(" "),e("p",[e("code",[t._v("git cherry-pick")])]),t._v(" "),e("ul",[e("li",[t._v("“挑拣”提交，单独抽取某个分支的一个提交点，将这个提交点的所有修改内容，搬运到你的当前分支。")]),t._v(" "),e("li",[t._v("如果我们只想将其他分支的某个提交点合并进来，不想用"),e("code",[t._v("git merge")]),t._v("将所有提交点合并进来，就需要使用这个"),e("code",[t._v("git cherry-pick")]),t._v("。")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a3947957a9140c9a49944b80a6206af~tplv-k3u1fbpfcp-zoom-1.image",alt:"2dkjx4yeaal10xyvj29v.gif"}})]),t._v(" "),e("h3",{attrs:{id:"暂存代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暂存代码"}},[t._v("#")]),t._v(" 暂存代码")]),t._v(" "),e("p",[e("code",[t._v("git stash")])]),t._v(" "),e("ul",[e("li",[t._v("当我们想要切换去其他分支修复 bug，此时当前的功能代码还没修改完整，不想 commit，就需要暂存当前修改的文件，然后切换到 hotfix 分支修复 bug，修复完成再切换回来，将暂存的修改提取出来，继续功能开发。")]),t._v(" "),e("li",[t._v("还有另一种场景就是，同事在远程分支上推送了代码，此时拉下来有冲突，可以将我们自己的修改 stash 暂存起来，然后先拉最新的提交代码，再 pop 出来，这样可以避免一个冲突的提交点。")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将本地改动的暂存起来")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将未跟踪的文件暂存（另一种方式是先将新增的文件添加到暂存区，使其被git跟踪，就可以直接git stash）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash -u\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加本次暂存的备注，方便查找。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash save "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用暂存的更改")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除暂存")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用暂存的更改，然后删除该暂存，等价于git stash apply + git stash drop")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除所有缓存")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看缓存列表")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n")])])]),e("h3",{attrs:{id:"打印日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打印日志"}},[t._v("#")]),t._v(" 打印日志")]),t._v(" "),e("ol",[e("li",[t._v("​"),e("code",[t._v("git log")])])]),t._v(" "),e("p",[t._v("可以显示所有提交过的版本信息，如果感觉太繁琐，可以加上参数  "),e("code",[t._v("--pretty=oneline")]),t._v("，只会显示版本号和提交时的备注信息。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("​"),e("code",[t._v("git reflog")])])]),t._v(" "),e("p",[t._v("​"),e("code",[t._v("git reflog")]),t._v("  可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作），例如执行 "),e("code",[t._v("git reset --hard HEAD~1")]),t._v("，退回到上一个版本，用 git log 是看不出来被删除的"),e("commit-id",[t._v("，用"),e("code",[t._v("git reflog")]),t._v("则可以看到被删除的"),e("commit-id",[t._v("，我们就可以买后悔药，恢复到被删除的那个版本。")])],1)],1),t._v(" "),e("h2",{attrs:{id:"git-的下载、配置、工具推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的下载、配置、工具推荐"}},[t._v("#")]),t._v(" Git 的下载、配置、工具推荐")]),t._v(" "),e("ul",[e("li",[t._v("Git 下载地址\n"),e("ul",[e("li",[e("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://git-scm.com/downloads"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[t._v("两种拉取代码的方式\n"),e("ul",[e("li",[t._v("https：每次都要手动输入用户名和密码")]),t._v(" "),e("li",[t._v("ssh ：自动使用本地私钥+远程的公钥验证是否为一对秘钥")])])]),t._v(" "),e("li",[t._v("配置 ssh\n"),e("ul",[e("li",[e("code",[t._v('ssh-keygen -t rsa -C "邮箱地址"')])]),t._v(" "),e("li",[e("code",[t._v("cd ~/.ssh")]),t._v("切换到 home 下面的 ssh 目录、"),e("code",[t._v("cat id_rsa.pub")]),t._v("命令查看公钥的内容，然后复制")]),t._v(" "),e("li",[t._v("github 的"),e("code",[t._v("settings")]),t._v(" -> "),e("code",[t._v("SSH and GPG keys")]),t._v("-> 复制刚才的内容贴入 -> "),e("code",[t._v("Add SSH key")])]),t._v(" "),e("li",[t._v("全局配置一下 Git 用户名和邮箱\n"),e("ul",[e("li",[e("code",[t._v('git config --global user.name "xxx"')])]),t._v(" "),e("li",[e("code",[t._v('git config --global user.email "xxx@xx.com"')])]),t._v(" "),e("li",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d071e482abf42eabd3be08da8b655eb~tplv-k3u1fbpfcp-zoom-1.image",alt:"image.png"}})])])])])]),t._v(" "),e("li",[t._v("Git 相关工具推荐\n"),e("ul",[e("li",[t._v("图形化工具"),e("a",{attrs:{href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v(" SourceTree "),e("OutboundLink")],1),t._v("：可视化执行 git 命令，解放双手")]),t._v(" "),e("li",[t._v("VSCode 插件 "),e("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLens"),e("OutboundLink")],1),t._v("：可以在每行代码查看对应 git 的提交信息，而且提供每个提交点的差异对比")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);