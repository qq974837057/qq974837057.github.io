(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{371:function(t,v,_){t.exports=_.p+"assets/img/algo-concept.af92f97c.jpg"},372:function(t,v,_){t.exports=_.p+"assets/img/algo-curve.80e2d6ac.png"},373:function(t,v,_){t.exports=_.p+"assets/img/algo-data.abaaad90.png"},374:function(t,v,_){t.exports=_.p+"assets/img/algo-stack.d42f028f.jpg"},375:function(t,v,_){t.exports=_.p+"assets/img/algo-queue.cd074708.jpg"},376:function(t,v,_){t.exports=_.p+"assets/img/Hash-1.3d93daea.png"},377:function(t,v,_){t.exports=_.p+"assets/img/Hash-2.155e5824.png"},378:function(t,v,_){t.exports=_.p+"assets/img/Hash-3.4028f9d1.png"},379:function(t,v,_){t.exports=_.p+"assets/img/B-Tree-height.42cd56d0.png"},380:function(t,v,_){t.exports=_.p+"assets/img/B-Tree-full.31ff7f1b.png"},381:function(t,v,_){t.exports=_.p+"assets/img/B-Tree-traverse.6cac6f7e.png"},382:function(t,v,_){t.exports=_.p+"assets/img/B-Tree-search.5d3ede28.png"},383:function(t,v,_){t.exports=_.p+"assets/img/heap-1.fa07fb7a.png"},384:function(t,v,_){t.exports=_.p+"assets/img/heap-2.01a13bd7.png"},385:function(t,v,_){t.exports=_.p+"assets/img/heap-3.63b45c5f.jpg"},386:function(t,v,_){t.exports=_.p+"assets/img/heap-4.813884f7.jpg"},387:function(t,v,_){t.exports=_.p+"assets/img/DFS-BFS.aaa0aafd.png"},388:function(t,v,_){t.exports=_.p+"assets/img/BFS.6fe1bfc2.jpg"},389:function(t,v,_){t.exports=_.p+"assets/img/DFS.7a5c50dd.png"},517:function(t,v,_){"use strict";_.r(v);var a=_(45),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"时间复杂度和空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度和空间复杂度"}},[t._v("#")]),t._v(" 时间复杂度和空间复杂度")]),t._v(" "),a("p",[a("img",{attrs:{src:_(371),alt:"复杂度概念"}}),t._v(" "),a("img",{attrs:{src:_(372),alt:"复杂度曲线"}}),t._v(" "),a("img",{attrs:{src:_(373),alt:"常用结构复杂度"}})]),t._v(" "),a("h3",{attrs:{id:"时间空间的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间空间的选择"}},[t._v("#")]),t._v(" 时间空间的选择")]),t._v(" "),a("ul",[a("li",[t._v("用时间换空间：内存紧缺情况下，选择空间复杂度低，时间复杂度高的。")]),t._v(" "),a("li",[t._v("用空间换时间：空间充足、追求执行速度情况下，选择空间复杂度高，时间复杂度低的。")])]),t._v(" "),a("h3",{attrs:{id:"线性表-or-非线性表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表-or-非线性表"}},[t._v("#")]),t._v(" 线性表 or 非线性表")]),t._v(" "),a("ul",[a("li",[t._v("线性表：数组、链表、队列、栈")]),t._v(" "),a("li",[t._v("非线性表：二叉树、堆、图等")])]),t._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("1、属于线性表,只有前后两个方向")]),t._v(" "),a("li",[t._v("2、一组连续的内存空间")]),t._v(" "),a("li",[t._v("3、随机访问高效，根据下标随机访问的时间复杂度为O(1)，公式计算该存储的地址。")]),t._v(" "),a("li",[t._v("4、插入和删除是低效的，插入第k个位置需要将k~n的元素都往后移动，删除第k个元素同样也要移动元素(特殊情况是比较快，比如添加/删除最后一个元素)。但平均时间复杂度为O(n)")])]),t._v(" "),a("h3",{attrs:{id:"数组和链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组和链表"}},[t._v("#")]),t._v(" 数组和链表")]),t._v(" "),a("p",[t._v("数组：【随机读取快速】【插入/删除需要移动其他成员】【场景：随机根据index读取元素】\n链表：【随机读取低效】【插入/删除只需改变指针】【场景：模拟流程、可中断、可继续】")]),t._v(" "),a("h2",{attrs:{id:"链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),a("h3",{attrs:{id:"特点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点-2"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("1、属于线性表,只有前后两个方向，头结点（第一个）记录链表的基地址，尾结点（最后一个）的next指针指向NULL")]),t._v(" "),a("li",[t._v("2、由零散的内存块串联")]),t._v(" "),a("li",[t._v("3、随机访问低效，根据下标随机访问的时间复杂度为O(n)，得从第一个往后查找。")]),t._v(" "),a("li",[t._v("4、插入和删除是高效的，本身是不连续的内存空间，可以直接改变相邻结点的指针即可。时间复杂度为O(1），双向链表还会更高效，适合更多情况。")])]),t._v(" "),a("h3",{attrs:{id:"分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),a("ul",[a("li",[t._v("单链表：尾结点指针指向空地址")]),t._v(" "),a("li",[t._v("循环链表：尾结点指针指向链表的头结点，首尾相连")]),t._v(" "),a("li",[t._v("双链表：有两个方向，有next后指针和prev前指针，占用更多内存空间。某些情况插入、删除比单链表更高效。如：删除给定指针指向的结点，需要找到前结点。此时双向链表复杂度为O(1)，单链表还要从头遍历查找为O(n)。")]),t._v(" "),a("li",[t._v("双向循环链表：前两个结合。")])]),t._v(" "),a("h3",{attrs:{id:"技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技巧"}},[t._v("#")]),t._v(" 技巧")]),t._v(" "),a("p",[t._v("1、理解：指针其实就是引用，指针中保存变量的内存地址，指向该变量，可通过指针找到变量。\n2、注意：指针丢失和内存泄漏（比如注意插入的操作顺序，先将新节点的next指向前个节点的next，再将前个节点的next指向新节点。）")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将x的结点的next指针指向b结点；")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将p的next指针指向x结点；")]),t._v("\n")])])]),a("p",[t._v("3、使用哨兵解决边界问题，针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。为了简化，使用带头链表（head指针指向哨兵节点）\n4、考虑边界：\n如果链表为空时，代码是否能正常工作？\n如果链表只包含一个结点时，代码是否能正常工作？\n如果链表只包含两个结点时，代码是否能正常工作？\n代码逻辑在处理头结点和尾结点的时候，是否能正常工作？\n5、使用画图法让思路清晰\n6、多练，常用链表操作")]),t._v(" "),a("ul",[a("li",[t._v("单链表反转：迭代；递归")]),t._v(" "),a("li",[t._v("链表中是否有环：哈希表保存，看是否访问过；快慢指针（慢1块2）；")]),t._v(" "),a("li",[t._v("两个有序的链表合并")]),t._v(" "),a("li",[t._v("删除链表倒数第 n 个结点")]),t._v(" "),a("li",[t._v("求链表的中间结点")])]),t._v(" "),a("h2",{attrs:{id:"堆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆栈"}},[t._v("#")]),t._v(" 堆栈")]),t._v(" "),a("p",[a("img",{attrs:{src:_(374),alt:"堆栈"}})]),t._v(" "),a("ul",[a("li",[t._v("如何实现栈：\n"),a("ul",[a("li",[t._v("可基于数组（顺序栈）")]),t._v(" "),a("li",[t._v("或基于链表（链式栈）")])])]),t._v(" "),a("li",[t._v("复杂度：\n"),a("ul",[a("li",[t._v("访问和查找时间复杂度为O(n)")]),t._v(" "),a("li",[t._v("入栈和出栈时间/空间复杂度都是O(1)")]),t._v(" "),a("li",[t._v("入栈、出栈只涉及栈顶个别数据的操作，所以时间复杂度都是 O(1)。")]),t._v(" "),a("li",[t._v("一两个临时变量存储空间，所以空间复杂度是 O(1)。")])])]),t._v(" "),a("li",[t._v("场景应用：\n"),a("ul",[a("li",[t._v("函数调用栈")]),t._v(" "),a("li",[t._v("表达式运算（两个栈实现，一个放操作数，一个放运算符）")]),t._v(" "),a("li",[t._v("判断括号嵌套匹配是否正确（遍历将左括号压入，遇到右括号取出）")]),t._v(" "),a("li",[t._v("浏览器前进后退（两个栈实现，后退则压入另一个栈，前进从栈取出）")])])])]),t._v(" "),a("h2",{attrs:{id:"队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),a("p",[a("img",{attrs:{src:_(375),alt:"队列"}})]),t._v(" "),a("ul",[a("li",[t._v("场景：\n"),a("ul",[a("li",[t._v("线程池的请求排队，先进先服务，资源有限的场景，没有空闲资源，可通过队列这种数据结构实现请求排队。")])])]),t._v(" "),a("li",[t._v("操作：\n"),a("ul",[a("li",[t._v("入队：enqueue()")]),t._v(" "),a("li",[t._v("出队：dequeue()")])])]),t._v(" "),a("li",[t._v("复杂度：\n"),a("ul",[a("li",[t._v("访问和查找时间复杂度为O(n)")]),t._v(" "),a("li",[t._v("插入和删除时间/空间复杂度都是O(1)")])])]),t._v(" "),a("li",[t._v("实现\n"),a("ul",[a("li",[t._v("数组实现：顺序队列，两个指针，一个head指向对头，一个tail指向 队尾，出队head和入队的tail指针都会持续向后移动，当空间用满之后，需要做数据搬移，在入队时候进行一次搬移，将剩下的任务搬到下标为0的位置。")]),t._v(" "),a("li",[t._v("链表实现：链式队列")])])]),t._v(" "),a("li",[t._v("循环队列：\n"),a("ul",[a("li",[t._v("tail指针循环回到头部位置0的下标，而不是加1，解决数据搬移问题，需要做好队空和队满的判断。")])])])]),t._v(" "),a("h2",{attrs:{id:"散列表-hash-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#散列表-hash-table"}},[t._v("#")]),t._v(" 散列表 Hash Table")]),t._v(" "),a("blockquote",[a("p",[t._v("了解其原理即可，一般都有较好的封装实现")])]),t._v(" "),a("ul",[a("li",[t._v("散列表也叫哈希表，本质是数组的一种扩展，利用数组支持按照下标随机访问数据的特性。")]),t._v(" "),a("li",[t._v("通过散列函数将元素的键  > 映射为下标，将数据存入该下标的位置。")]),t._v(" "),a("li",[t._v("在查询元素时，通过散列将键转为下标即可用O(1)的时间找到该key对应在数组中的数据。")]),t._v(" "),a("li",[t._v("组成：\n"),a("ul",[a("li",[t._v("key 键")]),t._v(" "),a("li",[t._v("hash function 哈希函数（散列函数）")]),t._v(" "),a("li",[t._v("hash(key)  哈希值，是由key通过hash function计算得到的，映射为数组的下标\n"),a("img",{attrs:{src:_(376),alt:"Hash-1"}})])])]),t._v(" "),a("li",[t._v("解决散列冲突：\n"),a("ul",[a("li",[t._v("开放寻址法")]),t._v(" "),a("li",[t._v("链表法（简单）\n"),a("ul",[a("li",[t._v("在散列表中，每个“桶（bucket）”或者“槽（slot）”会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。")]),t._v(" "),a("li",[t._v("当插入的时候，我们只需要通过散列函数计算出对应的散列槽位，将其插入到对应链表中即可，所以插入的时间复杂度是 O(1)。.")]),t._v(" "),a("li",[t._v("当查找、删除一个元素时，我们同样通过散列函数计算出对应的槽，然后遍历链表查找或者删除。时间复杂度跟链表的长度 k 成正比，也就是 O(k)。对于散列比较均匀的散列函数来说，理论上讲，k=n/m，其中 n 表示散列中数据的个数，m 表示散列表中“槽”的个数。\n"),a("img",{attrs:{src:_(377),alt:"Hash-2"}})])])])])]),t._v(" "),a("li",[t._v("散列和链表的结合使用\n"),a("ul",[a("li",[t._v("散列表这种数据结构虽然支持非常高效的数据插入、删除、查找操作，但是散列表中的数据都是通过散列函数打乱之后无规律存储的。也就说，它无法支持按照某种顺序快速地遍历数据。如果希望按照顺序遍历散列表中的数据，那我们需要将散列表中的数据拷贝到数组中，然后排序，再遍历。")]),t._v(" "),a("li",[t._v("因为散列表是动态数据结构，不停地有数据的插入、删除，所以每当我们希望按顺序遍历散列表中的数据的时候，都需要先排序，那效率势必会很低。为了解决这个问题，我们将散列表和链表（或者跳表）结合在一起使用。")])])]),t._v(" "),a("li",[t._v("例子：LRU 缓存淘汰算法\n"),a("ul",[a("li",[t._v("查找操作，删除头结点、链表尾部插入数据等，都可以在 O(1) 的时间复杂度内完成。所以，这三个操作的时间复杂度都是 O(1)。")]),t._v(" "),a("li",[t._v("通过散列表和双向链表的组合使用，实现了一个高效的、支持 LRU 缓存淘汰算法的缓存系统原型。"),a("br"),t._v(" "),a("img",{attrs:{src:_(378),alt:"Hash-3"}})])])])]),t._v(" "),a("h2",{attrs:{id:"二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" 二叉树")]),t._v(" "),a("h3",{attrs:{id:"树的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的概念"}},[t._v("#")]),t._v(" 树的概念")]),t._v(" "),a("ul",[a("li",[t._v("节点：树中的每个元素称为节点，二叉树的节点数最多为2^k - 1(k为二叉树有多少层)，在非空二叉树中，第i层的结点总数不超过2^(i-1)")]),t._v(" "),a("li",[t._v("根节点:没有父节点的节点")]),t._v(" "),a("li",[t._v("父节点:指向子节点的节点")]),t._v(" "),a("li",[t._v("子节点:被父节点指向的节点")]),t._v(" "),a("li",[t._v("兄弟节点:具有相同父节点的多个节点称为兄弟节点关系")]),t._v(" "),a("li",[t._v("叶子节点：没有子节点的节点")])]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[t._v("节点的高度：节点到叶子节点的最长路径(边数)")]),t._v(" "),a("li",[t._v("节点的深度：根节点到节点的路径所包含的边数（根节点的深度是0）")]),t._v(" "),a("li",[t._v("节点的层数：节点的深度+1（根节点的层数是1）")]),t._v(" "),a("li",[t._v("树的高度：等于根节点的高度\n"),a("img",{attrs:{src:_(379),alt:"高度深度"}})])]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[t._v("二叉树：每个节点最多两个叉，也就是两个子节点。")]),t._v(" "),a("li",[t._v("完全二叉树：叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，也就是铺满完整。")]),t._v(" "),a("li",[t._v("满二叉树：满二叉树又是完全二叉树的一种特殊情况。叶子节点全都在最底层，除了叶子节点之外，每个节点都有左右两个子节点。\n"),a("img",{attrs:{src:_(380),alt:"满二叉树"}})])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("两种存储方式：")]),t._v(" "),a("ul",[a("li",[t._v("链式存储法:每个节点有三个字段，其中一个存储数据，另外两个是指向左右子节点的指针。")]),t._v(" "),a("li",[t._v("基于数组的顺序存储法：根节点存储在下标 i = 1 的位置，那左子节点存储在下标 2 * i = 2 的位置，右子节点存储在 2 * i + 1 = 3 的位置。只要知道根节点存储的位置（一般情况下，为了方便计算子节点，根节点会存储在下标为 1 的位置），这样就可以通过下标计算，串起整棵树。")])]),t._v(" "),a("h3",{attrs:{id:"二叉树的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历"}},[t._v("#")]),t._v(" 二叉树的遍历")]),t._v(" "),a("p",[a("img",{attrs:{src:_(381),alt:"二叉树的遍历"}})]),t._v(" "),a("h4",{attrs:{id:"前序遍历-根左右"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前序遍历-根左右"}},[t._v("#")]),t._v(" 前序遍历（根左右）")]),t._v(" "),a("blockquote",[a("p",[t._v("对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。")])]),t._v(" "),a("h4",{attrs:{id:"中序遍历-左根右"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中序遍历-左根右"}},[t._v("#")]),t._v(" 中序遍历（左根右）")]),t._v(" "),a("blockquote",[a("p",[t._v("对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树。")])]),t._v(" "),a("h4",{attrs:{id:"后序遍历-左右根"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后序遍历-左右根"}},[t._v("#")]),t._v(" 后序遍历（左右根）")]),t._v(" "),a("blockquote",[a("p",[t._v("对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身。")])]),t._v(" "),a("h3",{attrs:{id:"二叉搜索-查找-树-binary-search-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索-查找-树-binary-search-tree"}},[t._v("#")]),t._v(" 二叉搜索（查找）树 - Binary Search Tree")]),t._v(" "),a("blockquote",[a("p",[t._v("有序的、左子树的所有值都小于根节点、右子树的值都大于根节点，或者空节点也是合理的查找树。")])]),t._v(" "),a("ul",[a("li",[t._v("支持动态数据集合的快速插入、删除、查找操作。")]),t._v(" "),a("li",[t._v("搜索更快速，平均O(logn)，最坏O(n)。\n"),a("img",{attrs:{src:_(382),alt:"二叉搜索树"}})])]),t._v(" "),a("h2",{attrs:{id:"堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("概念：一种特殊的树")])]),t._v(" "),a("li",[a("p",[t._v("需要满足：完全二叉树、每个节点的值都大于等于或小于等于它的左右子节点的值")])]),t._v(" "),a("li",[a("p",[t._v("分类")]),t._v(" "),a("ul",[a("li",[t._v("大顶堆：每个节点的值都大于等于子树中每个节点值")]),t._v(" "),a("li",[t._v("小顶堆：每个节点的值都小于等于子树中每个节点值")])])]),t._v(" "),a("li",[a("p",[t._v("存储：使用数组结构来存储，节省空间")])]),t._v(" "),a("li",[a("p",[t._v("核心操作：堆中插入元素、删除堆顶元素")])]),t._v(" "),a("li",[a("p",[t._v("插入一个元素：复杂度O(logn)")]),t._v(" "),a("ul",[a("li",[t._v("堆化：调整交换元素的位置，使其满足堆的特性（大于等于或者小于等于）")]),t._v(" "),a("li",[t._v("插在最后叶子节点，与父节点对比大小，不满足则互换节点，从下往上堆化，直到满足条件为止。\n"),a("img",{attrs:{src:_(383),alt:"插入一个元素"}})])])]),t._v(" "),a("li",[a("p",[t._v("删除堆顶元素：复杂度O(logn)")]),t._v(" "),a("ul",[a("li",[t._v("根据关系：堆顶要么是最大值（大顶堆），要么是最小值（小顶堆）")]),t._v(" "),a("li",[t._v("删除堆顶元素后，将最后一个节点放到堆顶，从上往下堆化，这样就可以满足堆的结构\n"),a("img",{attrs:{src:_(384),alt:"删除堆顶元素"}})])])]),t._v(" "),a("li",[a("p",[t._v("重要应用")]),t._v(" "),a("ul",[a("li",[t._v("堆排序")]),t._v(" "),a("li",[t._v("Top K 问题：堆化，取前 K 个元素")]),t._v(" "),a("li",[t._v("中位数问题：维护两个堆，一大（前50%）一小（后50%），奇数元素取大顶堆的堆顶，偶数取取大、小顶堆的堆顶")])])]),t._v(" "),a("li",[a("p",[t._v("Top K问题【求(第/前)K大用小顶堆，求(第/前)K小用大顶堆】")]),t._v(" "),a("ul",[a("li",[t._v("第一类：静态数据集合的Top K，数据集合不会变动。\n"),a("ul",[a("li",[t._v("维护一个大小为K的小顶堆，顺序遍历数组集合，将数组遍历的元素与堆顶元素比较。")]),t._v(" "),a("li",[t._v("数组元素大于堆顶元素，将堆顶元素删除，将这个元素插入堆中，并进行堆化。")]),t._v(" "),a("li",[t._v("数组元素小于堆顶元素，不作处理，继续遍历数组。")]),t._v(" "),a("li",[t._v("全部遍历完成，堆中的数据就是前K大的数据。")]),t._v(" "),a("li",[t._v("遍历数组需要 O(n) 的时间复杂度，一次堆化需要 O(logK) 时间复杂度，所以时间复杂度O(n logK)。空间复杂度O(k)，用于存储堆元素。")]),t._v(" "),a("li",[t._v("其他做法：利用排序来做，将数组进行排序，然后取K个数即可，时间复杂度O(n log n)")])])]),t._v(" "),a("li",[t._v("第二类：动态数据集合的Top K，有数据会动态添加到集合中。\n"),a("ul",[a("li",[t._v("一直维护K大小的小顶堆，每次有数据添加到集合，就将它与堆顶元素比较。")]),t._v(" "),a("li",[t._v("任何时候查询前K大的数据，都可以立刻返回。每次求 Top K 问题的时间复杂度仅为 O(logK)。")])])])])]),t._v(" "),a("li",[a("p",[t._v("求中位数")])])]),t._v(" "),a("blockquote",[a("p",[t._v("求中位数，对于静态数据，中位数是固定的，可采用先排序，后取中间值。")])]),t._v(" "),a("blockquote",[a("p",[t._v("对于动态数据，中位数是不固定的，每次插入数据后，都需要排序，会变得很低效，所以可以采用两个堆的方法实现高效求中位数。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("中位数，就是处于中间的那个数：\n[1, 2, 3, 4, 5]    的中位数是 3\n[1, 2, 3, 4, 5, 6]   的中位数是 3, 4\n即：\n当 n % 2 !== 0 时，中位数为：arr[(n-1)/2]\n当 n % 2 === 0 时，中位数为：arr[n/2],  arr[n/2 + 1]\n")])])]),a("ul",[a("li",[a("p",[t._v("利用两个堆来求解中位数问题")])]),t._v(" "),a("li",[a("p",[t._v("大顶堆：用来存取前 n/2 个小元素，如果 n 为奇数，则用来存取前 Math.floor(n/2) + 1 个元素")])]),t._v(" "),a("li",[a("p",[t._v("小顶堆：用来存取后 n/2 个小元素")])]),t._v(" "),a("li",[a("p",[t._v("那么，中位数就为：")]),t._v(" "),a("ul",[a("li",[t._v("n 为奇数：中位数是大顶堆的堆顶元素")]),t._v(" "),a("li",[t._v("n 为偶数：中位数是大顶堆的堆顶元素与小顶堆的堆顶元素\n"),a("img",{attrs:{src:_(385),alt:"中位数1"}})])])]),t._v(" "),a("li",[a("p",[t._v("当数组为动态数组时，每当数组中插入一个元素时，需要调整堆")])]),t._v(" "),a("li",[a("p",[t._v("如果插入元素比大顶堆的堆顶要大，则将该元素插入到小顶堆中；如果要小，则插入到大顶堆中。")])]),t._v(" "),a("li",[a("p",[t._v("当插入完后，如果大顶堆、小顶堆中元素的个数不满足我们已上的要求，我们就需要不断的将大顶堆的堆顶元素或小顶堆的堆顶元素移动到另一个堆中，直到满足要求")])]),t._v(" "),a("li",[a("p",[t._v("由于插入元素到堆、移动堆顶元素都需要堆化，所以，插入的时间复杂度为 O(logN) ，每次插入完成后求中位数仅仅需要返回堆顶元素即可，时间复杂度为 O(1)")])])]),t._v(" "),a("p",[a("img",{attrs:{src:_(386),alt:"中位数2"}})]),t._v(" "),a("h2",{attrs:{id:"递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),a("ul",[a("li",[t._v("优缺点：（需要根据实际情况选择是否用递归解决问题）\n"),a("ul",[a("li",[t._v("优点：代码简洁，表达能力强")]),t._v(" "),a("li",[t._v("缺点：重复计算，过多调用导致时间空间复杂度高。")])])]),t._v(" "),a("li",[t._v("递归需要满足三个条件：\n"),a("ul",[a("li",[t._v("一个问题的解可分解为子问题的解")]),t._v(" "),a("li",[t._v("数据规模不同，但思路相同")]),t._v(" "),a("li",[t._v("存在终止条件")])])]),t._v(" "),a("li",[t._v("如何编写：\n"),a("ul",[a("li",[t._v("写出递推公式")]),t._v(" "),a("li",[t._v("找到终止条件")]),t._v(" "),a("li",[t._v("思路：大问题分解小问题，写出递推公式，推敲终止条件，翻译为代码。")]),t._v(" "),a("li",[t._v("注意：不需要想一层层的调用关系，只需要抽象成一个公式即可。")])])]),t._v(" "),a("li",[t._v("控制副作用：\n"),a("ul",[a("li",[t._v("避免堆栈溢出（设置调用深度，超出则报错）")]),t._v(" "),a("li",[t._v("避免重复计算（通过数据结构如散列表，保存计算过的值）")])])]),t._v(" "),a("li",[t._v("应用：\n"),a("ul",[a("li",[t._v("DFS 深度优先搜索")]),t._v(" "),a("li",[t._v("前中后序二叉树遍历")]),t._v(" "),a("li",[t._v("分治算法（中间值有重复计算，效果需优化）")])])])]),t._v(" "),a("h2",{attrs:{id:"排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),a("blockquote",[a("p",[t._v("详见排序专题")])]),t._v(" "),a("h2",{attrs:{id:"二分查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[t._v("#")]),t._v(" 二分查找")]),t._v(" "),a("p",[a("img",{attrs:{src:_(387),alt:"BFS和DFS"}})]),t._v(" "),a("blockquote",[a("p",[t._v("BFS和DFS两种搜索算法仅适用于树或者图不大的搜索。\n树的节点搜索不会重复，图就可能会出现重复，要进行判断是否已经出现过，可使用set结构保存已经出现过的。")])]),t._v(" "),a("h2",{attrs:{id:"广度优先搜索bfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索bfs"}},[t._v("#")]),t._v(" 广度优先搜索BFS")]),t._v(" "),a("ul",[a("li",[t._v("一般使用队列实现")]),t._v(" "),a("li",[t._v("从起始顶点开始，一层一层往外遍历")]),t._v(" "),a("li",[t._v("它的特点是越是接近根结点的结点将越早地遍历")]),t._v(" "),a("li",[t._v("题目：二叉树的层次遍历\n"),a("img",{attrs:{src:_(388),alt:"BFS"}})])]),t._v(" "),a("h2",{attrs:{id:"深度优先搜索dfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索dfs"}},[t._v("#")]),t._v(" 深度优先搜索DFS")]),t._v(" "),a("ul",[a("li",[t._v("一般使用栈实现")]),t._v(" "),a("li",[t._v("回溯思想，先一杆子叉到底，回头看看有没有漏网之鱼")]),t._v(" "),a("li",[t._v("解题推荐递归写法")]),t._v(" "),a("li",[t._v("题目：二叉树的最大深度\n"),a("img",{attrs:{src:_(389),alt:"DFS"}})])]),t._v(" "),a("h2",{attrs:{id:"动态规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),a("ul",[a("li",[t._v("1、解法：先 （递归+记忆化） -> 再转为 递推")]),t._v(" "),a("li",[t._v("2、状态定义：dp[n], fib[n]")]),t._v(" "),a("li",[t._v("3、状态转移DP方程：dp[n] = best_of(dp[n - 1],dp[n-2],...)")]),t._v(" "),a("li",[t._v("4、存在最优子结构（也就是每个子问题都可得到最优解）")]),t._v(" "),a("li",[t._v("5、只关心前个阶段的状态值，不关系如何一步一步推导；某阶段状态一旦确定，就不受之后阶段的决策影响")]),t._v(" "),a("li",[t._v("特点：适合求极大/小值，记录局部最优值，避免重复计算，通过动态转移方程，推导出最后的答案。")])]),t._v(" "),a("h2",{attrs:{id:"贪心算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("求解时，总是做出在当前看来是最好的选择")])]),t._v(" "),a("li",[a("p",[t._v("比较少见，因为处处贪心，大部分情况下，结果并不会最优。")])]),t._v(" "),a("li",[a("p",[t._v("贪心解决不了就使用动态规划。")])]),t._v(" "),a("li",[a("p",[t._v("适合：问题能分解为子问题，子问题的最优解能推到最后最终问题的最优解。")])]),t._v(" "),a("li",[a("p",[t._v("贪心算法和动态规划区别是：")]),t._v(" "),a("ul",[a("li",[t._v("贪心每个子问题都会做一个当前最优的选择，不能回退。")]),t._v(" "),a("li",[t._v("而动态规划可以保存之前的计算结果，根据以前结果来选择，可以回退。")]),t._v(" "),a("li",[t._v("是动态规划的一种特殊情况，条件限制比较多。")])])])]),t._v(" "),a("h2",{attrs:{id:"回溯算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[t._v("#")]),t._v(" 回溯算法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("类似枚举所有解，找到当前阶段满足期望的解。")])]),t._v(" "),a("li",[a("p",[t._v("在每个阶段遇到分叉口时，随便选一条")])]),t._v(" "),a("li",[a("p",[t._v("当走不同（不符合期望的解），就回退到分叉口，另选别的解。")])]),t._v(" "),a("li",[a("p",[t._v("实现方式：递归，可用剪枝操作提高效率，如果能够提前知道这一条分支不能搜索到满意的结果，就可以提前结束。")])]),t._v(" "),a("li",[a("p",[t._v("特点：不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，穷举整棵决策树是无法避免的。复杂度一般都很高是指数级别，只适合小规模数据。能用动态、贪心解决都可以用回溯。")])]),t._v(" "),a("li",[a("p",[t._v("应用：全排列、深度优先搜索、八皇后、背包问题。")])]),t._v(" "),a("li",[a("p",[t._v("和深度优先搜索区别：")]),t._v(" "),a("ul",[a("li",[t._v("深度优先是“遍历”，本质是无序的。")]),t._v(" "),a("li",[t._v("回溯是“求解”，本质是有序的。")])])]),t._v(" "),a("li",[a("p",[t._v("解题框架")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("路径")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 满足结束条件"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径的拷贝"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 循环在选择列表中选择元素"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        做选择\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归,调用自己")]),t._v("\n        撤销选择\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res        \n")])])])])]),t._v(" "),a("h2",{attrs:{id:"分治算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分治算法"}},[t._v("#")]),t._v(" 分治算法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("分解：原问题分解为一系列子问题")])]),t._v(" "),a("li",[a("p",[t._v("解决：递归求解每个子问题")])]),t._v(" "),a("li",[a("p",[t._v("合并：子问题的结果合并为原问题。")])]),t._v(" "),a("li",[a("p",[t._v("实现方式：递归")])]),t._v(" "),a("li",[a("p",[t._v("和DP动态规划的区别：")]),t._v(" "),a("ul",[a("li",[t._v("1、分治是自顶向下，动态规划是自底向上，这里指递归树。")]),t._v(" "),a("li",[t._v("2、它大部分不能抽象成多阶段决策模型。")])])])])])}),[],!1,null,null,null);v.default=s.exports}}]);